{
  "name": "vscode-mcp-tool-demo",
  "displayName": "MCP Tool Demo",
  "description": "Minimal example: expose a Python MCP tool to VS Code LLMs",
  "version": "0.0.1",
  "publisher": "Ivan Sanchez",
  "engines": {
    "vscode": "^1.92.0"
  },
  "categories": [
    "Other"
  ],
  "activationEvents": [
    "onStartupFinished"
  ],
  "type": "module",
  "main": "./dist/extension.js",
  "contributes": {
    "configuration": {
      "title": "MCP Tool Demo",
      "properties": {
        "mcpDemo.pythonPath": {
          "type": "string",
          "default": "",
          "markdownDescription": "Absolute path to the Python interpreter to run the MCP server. If empty, uses `$MCP_PYTHON` or `python3`."
        },
        "mcpDemo.serverPath": {
          "type": "string",
          "default": "",
          "markdownDescription": "Absolute path to the Python MCP server script. If empty, defaults to `${workspaceFolder}/python_server/server.py`."
        },
        "mcpDemo.samplingModel": {
          "type": "string",
          "default": "",
          "markdownDescription": "Optional explicit language model id to use for MCP sampling requests. If empty, the extension will pick based on server meta preferences, preferred families, or default vendor selection."
        },
        "mcpDemo.preferredFamilies": {
          "type": "array",
          "items": { "type": "string" },
          "default": ["gpt-5", "gemini-2.5-pro", "gpt-4.1", "gpt-4o", "o3", "gpt-4.1-mini"],
          "markdownDescription": "Ordered list of model families to attempt for sampling when no explicit model id is chosen. Server _meta.preferredFamilies overrides this if provided."
        }
      }
    },
    "languageModelTools": [
      {
        "name": "mcp-greet",
  "toolReferenceName": "mcp-greet",
        "displayName": "MCP Greet",
        "modelDescription": "Call the Python MCP server greet tool",
        "tags": ["mcp", "demo"],
        "inputSchema": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "Name to greet"
            }
          },
          "required": ["name"]
        },
        "canBeReferencedInPrompt": true
      }
      ,
      {
        "name": "mcp-story",
        "toolReferenceName": "mcp-story",
        "displayName": "MCP Story",
        "modelDescription": "Generate a short story via MCP sampling",
        "tags": ["mcp", "story"],
        "inputSchema": {
          "type": "object",
          "properties": {
            "topic": { "type": "string", "description": "Story topic" },
            "style": { "type": "string", "description": "Writing style (e.g., concise, whimsical)" }
          }
        },
        "canBeReferencedInPrompt": true
      }
      ,
      {
        "name": "mcp-query-html",
        "toolReferenceName": "mcp-query-html",
        "displayName": "MCP Query HTML",
        "modelDescription": "Answer questions about a local HTML file (provide html_path and query)",
        "tags": ["mcp", "html", "scraping"],
        "inputSchema": {
          "type": "object",
          "properties": {
            "html_path": { "type": "string", "description": "Absolute or workspace-relative path to HTML file" },
            "query": { "type": "string", "description": "Question or instruction about the HTML content" }
          },
          "required": ["html_path", "query"]
        },
        "canBeReferencedInPrompt": true
      }
    ]
  },
  "scripts": {
    "vscode:prepublish": "npm run build",
    "build": "tsc -p ./",
    "watch": "tsc -watch -p ./",
  "lint": "eslint src --ext ts",
  "test:python": "pytest -q",
  "test:integration": "node tests/integration/query_html_integration.test.mjs",
  "test": "npm run build && npm run test:python && npm run test:integration"
  },
  "devDependencies": {
    "@types/node": "^20.11.30",
    "@types/vscode": "^1.92.0",
    "eslint": "^9.6.0",
    "typescript": "^5.4.0"
  },
  "dependencies": {
  "@modelcontextprotocol/sdk": "^1.17.3",
  "zod": "^3.23.8"
  }
}
